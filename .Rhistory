#'
#' @param my_packages input a vector of your packages
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallel = F) {
if (parallel == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else {Ncpus <- parallel::detectCores() - 1}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
message("You can set it back by: options(Ncpus = 1)")
}
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
print(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
}
packages <- c("viridis", "ggdark")
class(1)
#' @details you can use this function to download a batch of uninstalled packages from CRAN or bioconductor with judment if exists.
#'
#' @param my_packages input a vector of your packages
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F) {
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else {Ncpus <- parallel::detectCores() - 1}
} else if (class(parallels == "numeric")) {
Ncpus <- parallels
}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
print(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
message("You can set ur parallels it back by: options(Ncpus = 1)")
}
boost_install_packages(packages, parallels = 2)
#' @details you can use this function to download a batch of uninstalled packages from CRAN or bioconductor with judment if exists.
#'
#' @param my_packages input a vector of your packages
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F) {
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else {Ncpus <- parallel::detectCores() - 1}
} else if (class(parallels) == "numeric") {
Ncpus <- parallels
}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
print(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
message("You can set ur parallels it back by: options(Ncpus = 1)")
}
boost_install_packages(packages, parallels = 2)
#' @param loc input "China" means change mirror
#' @param loc input "recover" means drop the mirror
#'
#'
#' @return nothing but love
#' @keywords set_mirror
#' @export
#' @examples
#' set_mirror()
#' set_mirror("China")
set_mirror <- function(loc = "China") {
if (loc == "China") {
# clean previous mirror
options( BioC_mirror = NULL )
options( repos = NULL )
r <- getOption( "repos" );# set CRAN mirror for users in China
r[ "CRAN" ] <- "https://mirrors.tuna.tsinghua.edu.cn/CRAN/"; # mirror address of cran
# r <- r[-which(names(r) == "CRANextra")]
options( repos = r )
BioC <- getOption( "BioC_mirror" ); # set bioconductor mirror for users in China
BioC[ "BioC_mirror" ] <- "https://mirrors.ustc.edu.cn/bioc/"; # mirror address of bioconductor
options( BioC_mirror = BioC )
message("Now you successfully take a mirror, go ahead without any restrictions!")
} else if (loc == "reset") {
options( BioC_mirror = NULL )
options( repos = NULL )
message("You dropped the mirror. PONG!! ")
} else {
message("Don't support other regions yet. Sorry!")
}
}
set_mirror("reset")
set_mirror()
message("You can set ur mirror back by: set_mirror("reset")")
set_mirror('reset')
set_mirror()
#' @param parallels logical or numeric
#' @param mirror logical
#' @param jobs logical
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F, mirror = F, jobs = F) {
if (mirror == T) set_mirror()
if (jobs == T) {
job::job({sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
}
})})
} else {
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else {Ncpus <- parallel::detectCores() - 1}
} else if (class(parallels) == "numeric") {
Ncpus <- parallels
}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
message("You can set ur parallels back by: options(Ncpus = 1)")
message("You can set ur mirror back by: set_mirror('reset')")
}
remove(packages)
a <- c("viridis", "ggdark")
remove.packages(a)
boost_install_packages("viridis", mirror = T, parallels = 2, jobs = T)
#' @param parallels logical or numeric
#' @param mirror logical
#' @param jobs logical
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F, mirror = F, jobs = F) {
if (mirror == T) set_mirror()
if (jobs == T) {
message("Now will use jobs for installing. HAPPY! console is free now!")
job::job({sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
}
})}, packages = NULL)
} else {
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else {Ncpus <- parallel::detectCores() - 1}
} else if (class(parallels) == "numeric") {
Ncpus <- parallels
}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
message("You can set ur parallels back by: options(Ncpus = 1)")
message("You can set ur mirror back by: set_mirror('reset')")
}
remove.packages(a)
boost_install_packages("viridis", mirror = T, parallels = 2, jobs = T)
install.packages("rvcheck")
check_r()
library(rvcheck)
check_r()
check_bioc('ggtree')
?set_mirror
?update_all
get_fun_from_pkg
?get_fun_from_pkg
update_myself <- function(x = NULL, ...) {
message("upgrading this package from github mugpeng/pengToolkit")
devtools::install_github("mugpeng/pengToolkit")
}
?update_myself
this()
load_all()
?pengToolkit::update_myself()
?update_myself
roxygenize()
?update_myself
check()
Ncpus
check()
check()
options(Ncpus = Ncpus)
#' @param parallels logical or numeric
#' @param mirror logical
#' @param jobs logical
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F, mirror = F, jobs = F) {
if (mirror == T) set_mirror()
if (jobs == T) {
message("Now will use jobs for installing. HAPPY! console is free now!")
job::job({sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
}
})}, packages = NULL)
} else {
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else if (class(parallels) == "numeric") {
Ncpus <- parallels
}
else {Ncpus <- parallel::detectCores() - 1}
options(Ncpus = Ncpus)
}
message(paste0("We will use ", Ncpus, " cores for installing."))
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
message("You can set ur parallels back by: options(Ncpus = 1)")
message("You can set ur mirror back by: set_mirror('reset')")
}
boost_install_packages(c("devtools", "roxygen2", "testthat"))
remove("viridis")
remove.packages("viridis")
boost_install_packages(c("viridis"))
#' @param parallels logical or numeric
#' @param mirror logical
#' @param jobs logical
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F, mirror = F, jobs = F) {
if (jobs == T) {
message("Now will use jobs for installing. HAPPY! console is free now!")
job::job({sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
}
})}, packages = NULL)
} else {
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
message(paste0("We will use ", Ncpus, " cores for installing."))
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else if (class(parallels) == "numeric") {
Ncpus <- parallels
}
else {Ncpus <- parallel::detectCores() - 1}
options(Ncpus = Ncpus)
message("You can set ur parallels back by: options(Ncpus = 1)")
}
if (mirror == T) set_mirror(); message("You can set ur mirror back by: set_mirror('reset')")
}
update_myself <- function() {
message("upgrading this package from github mugpeng/pengToolkit")
devtools::install_github("mugpeng/pengToolkit")
}
#' @param parallels logical or numeric
#' @param mirror logical
#' @param jobs logical
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F, mirror = F, jobs = F) {
if (jobs == T) {
message("Now will use jobs for installing. HAPPY! console is free now!")
job::job({sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
}
})}, packages = NULL)
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
} else {
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else if (class(parallels) == "numeric") {
Ncpus <- parallels
}
else {Ncpus <- parallel::detectCores() - 1}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
message("You can set ur parallels back by: options(Ncpus = 1)")
}
if (mirror == T) set_mirror(); message("You can set ur mirror back by: set_mirror('reset')")
}
a <- c("cartography", "viridis")
boost_install_packages(a, parallels = T, jobs = T)
boost_install_packages(c("ggsci", "ggthemes"))
update_myself()
detach("package::pengToolkit")
detach("packages::pengToolkit")
detach("package:pengToolkit")
update_myself()
?pengToolkit
