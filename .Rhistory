BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
message(paste0("We will use ", Ncpus, " cores for installing."))
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else if (class(parallels) == "numeric") {
Ncpus <- parallels
}
else {Ncpus <- parallel::detectCores() - 1}
options(Ncpus = Ncpus)
message("You can set ur parallels back by: options(Ncpus = 1)")
}
if (mirror == T) set_mirror(); message("You can set ur mirror back by: set_mirror('reset')")
}
update_myself <- function() {
message("upgrading this package from github mugpeng/pengToolkit")
devtools::install_github("mugpeng/pengToolkit")
}
#' @param parallels logical or numeric
#' @param mirror logical
#' @param jobs logical
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F, mirror = F, jobs = F) {
if (jobs == T) {
message("Now will use jobs for installing. HAPPY! console is free now!")
job::job({sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
}
})}, packages = NULL)
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
} else {
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
} else if (class(parallels) == "numeric") {
Ncpus <- parallels
}
else {Ncpus <- parallel::detectCores() - 1}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
message("You can set ur parallels back by: options(Ncpus = 1)")
}
if (mirror == T) set_mirror(); message("You can set ur mirror back by: set_mirror('reset')")
}
a <- c("cartography", "viridis")
boost_install_packages(a, parallels = T, jobs = T)
boost_install_packages(c("ggsci", "ggthemes"))
update_myself()
detach("package::pengToolkit")
detach("packages::pengToolkit")
detach("package:pengToolkit")
update_myself()
?pengToolkit
file.edit("~/.Rprofile")
file.edit("~/.Rprofile")
?set_mirror
??set_mirror
pacman::p_load(pacman, pengToolkit)
getOption("Ncpus")
getOption("Ncpus", 1L)
#' @param parallels logical or numeric
#' @param mirror logical
#' @param jobs logical
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F, mirror = F, jobs = F) {
if (jobs == T) {
message("Now will use jobs for installing. HAPPY! console is free now!")
job::job({sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
}
})}, packages = NULL)
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
} else {
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
}
else {Ncpus <- parallel::detectCores() - 1}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
message("You can set ur parallels back by: options(Ncpus = 1)")
}
if (mirror == T) {
set_mirror()
message("You can set ur mirror back by: set_mirror('reset')")
}
}
boost_install_packages("ggdark", parallels = T)
boost_install_packages("ggdark", parallels = 3)
#' @param parallels logical or numeric
#' @param mirror logical
#' @param jobs logical
#'
#' @return information about what did the function do
#' @keywords boost_install_packages
#' @export
#' @examples
#' boost_install_packages(c("devtools", "roxygen2", "testthat"))
#' boost_install_packages(my_packages = c("devtools", "roxygen2", "testthat"))
boost_install_packages <- function(my_packages = my_packages, loaded = F, parallels = F, mirror = F, jobs = F) {
if (jobs == T) {
message("Now will use jobs for installing. HAPPY! console is free now!")
job::job({sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
}
})}, packages = NULL)
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
} else {
sapply(my_packages, simplify = F, function(my_packages = my_packages) {
if (!my_packages %in% rownames(installed.packages())) {
CRANpackages <- available.packages()
if (my_packages %in% rownames(CRANpackages)) {
install.packages(my_packages)
} else {
BiocManager::install(my_packages,
suppressUpdates = F,
ask = F)
}
} else {
message(paste0(my_packages, " is already installed."))
}
})
message(paste0(paste(my_packages, collapse=", "), " are already in your computer."))
}
if (loaded == T) {
sapply(my_packages, simplify = F, function(my_packages) library(my_packages, character.only= T, quietly = T))
message(paste0(paste(my_packages, collapse=", "), " are  also successfully loaded in your namespace."))
}
if (parallels == T) {
Ncpus <- parallel::detectCores()
if (Ncpus >= 8) {
Ncpus <- 8
}
else {Ncpus <- parallel::detectCores() - 1}
options(Ncpus = Ncpus)
message(paste0("We will use ", Ncpus, " cores for installing."))
message("You can set ur parallels back by: options(Ncpus = 1)")
} else if (class(parallels) == "numeric") {
max_cpu <- parallel::detectCores()
Ncpus <- parallels
if (Ncpus >= max_cpu) {
Ncpus <- max_cpu - 1
if (Ncpus >= 8) {
Ncpus <- 8
}
message("You think too high to your cpu, I will set it to a safe number.")
} else if (Ncpus >= 8) {
Ncpus <- 8
message("I think there is no need for you to recruit so many cpus.")
}
message(paste0("We will use ", Ncpus, " cores for installing."))
}
if (mirror == T) {
set_mirror()
message("You can set ur mirror back by: set_mirror('reset')")
}
}
boost_install_packages("paletteer", parallels = 100)
x + 1
test001 <- function(x) {
x + 1
}
test001(2)
cat(test001)
add_function <- function(...) {
write(test001, file = "./all_function_test/my_function.R")
}
add_function <- function(...) {
write(..., file = "./all_function_test/my_function.R")
}
add_function(test001)
test001
print(test001)
cat(test001)
paste0("test001", print(test001))
paste0("test001", as.character(print(test001)))
sink(file = "all_function_test/my_function.R")
print(test001)
sink()
?sink
?readline()
readline()
test001
sink(file = "all_function_test/my_function.R")
"test001 <- "
test001
sink()
test001 <-
function(x) {
x + 1
}
test002 <-
function(x) {
x + 1
}
rm(list = ls())
source("all_function_test/my_function.R")
source("all_function_test/my_function.R")
View(test002)
test002
add_function <- function(...) {
# var_args <- list(...)
sink(file = "./all_function_test/my_function.R")
cat(paste0(..., "<-"))
...
sink()
}
test001 <- function(x) {
x + 1
}
add_function(test001)
...
test001
test001 <- function(x) {
x + 1
}
test001
sink()
test001
names(test001)
attr(test001)
test001
v = 3
names(v)
v
get(test001)
get(v)
?get
get("v")
assign(v)
assign(v, 4)
assign("v", 4)
get("test002")
add_function <- function(...) {
# var_args <- list(...)
sink(file = "./all_function_test/my_function.R")
cat(paste0(..., "<-"))
get("...")
sink()
}
3
add_function(test001)
sink()
add_function("test001")
get("test001")
cat(get("test001"))
tmp <- get("test001")
add_function <- function(...) {
# var_args <- list(...)
sink(file = "./all_function_test/my_function.R")
cat(paste0(..., " <-"))
tmp <- get(...)
tmp
sink()
}
add_function("test001")
# var_args <- list(...)
sink(file = "./all_function_test/my_function.R")
cat(paste0("test001", " <-"))
tmp <- get("test001")
tmp
sink()
add_function <- function(...) {
# var_args <- list(...)
sink(file = "./all_function_test/my_function.R")
cat(paste0(..., " <-"))
tmp <- get(...)
tmp
sink()
}
add_function("test001")
add_function <- function(x) {
# var_args <- list(...)
sink(file = "./all_function_test/my_function.R")
cat(paste0(x, " <-"))
tmp <- get(x)
tmp
sink()
}
add_function("test001")
get("test001")
add_function <- function(x) {
# var_args <- list(...)
sink(file = "./all_function_test/my_function.R")
cat(paste0(x, " <-"))
tmp <- get(x)
print(tmp)
sink()
}
add_function("test001")
add_function <- function(...) {
var_args <- list(...)
x <- var_args[[1]]
var_args[1] <- NULL
sink(file = "./all_function_test/my_function.R")
cat(paste0(x, " <-"))
tmp <- get(x)
print(tmp)
sink()
for (i in var_args) {
sink(file = "./all_function_test/my_function.R", append = T)
cat(paste0(i, " <-"))
tmp <- get(i)
print(tmp)
sink()
}
}
add_function("test001")
add_function("test001", "test002")
add_function <- function(..., source_fun = F) {
if (source_fun = F) {
var_args <- list(...)
x <- var_args[[1]]
var_args[1] <- NULL
sink(file = "./all_function_test/my_function.R")
cat(paste0(x, " <-"))
tmp <- get(x)
print(tmp)
sink()
for (i in var_args) {
sink(file = "./all_function_test/my_function.R", append = T)
cat(paste0(i, " <-"))
tmp <- get(i)
print(tmp)
sink()
}
}
else {
source("./all_function_test/my_function.R")
}
}
add_function <- function(..., source_fun = F) {
if (source_fun = F) {
var_args <- list(...)
x <- var_args[[1]]
var_args[1] <- NULL
sink(file = "./all_function_test/my_function.R")
cat(paste0(x, " <-"))
tmp <- get(x)
print(tmp)
sink()
for (i in var_args) {
sink(file = "./all_function_test/my_function.R", append = T)
cat(paste0(i, " <-"))
tmp <- get(i)
print(tmp)
sink()
}
}
else {
source("./all_function_test/my_function.R")
}
}
add_function <- function(..., source_fun = F) {
if (source_fun == F) {
var_args <- list(...)
x <- var_args[[1]]
var_args[1] <- NULL
sink(file = "./all_function_test/my_function.R")
cat(paste0(x, " <-"))
tmp <- get(x)
print(tmp)
sink()
for (i in var_args) {
sink(file = "./all_function_test/my_function.R", append = T)
cat(paste0(i, " <-"))
tmp <- get(i)
print(tmp)
sink()
}
}
else {
source("./all_function_test/my_function.R")
}
}
add_function("test001", "test002")
rm(list = ls())
add_function(source_fun = T)
add_function <- function(..., source_fun = F) {
if (source_fun == F) {
var_args <- list(...)
x <- var_args[[1]]
var_args[1] <- NULL
sink(file = "./all_function_test/my_function.R")
cat(paste0(x, " <-"))
tmp <- get(x)
print(tmp)
sink()
for (i in var_args) {
sink(file = "./all_function_test/my_function.R", append = T)
cat(paste0(i, " <-"))
tmp <- get(i)
print(tmp)
sink()
}
}
else {
source("./all_function_test/my_function.R")
}
}
add_function(source_fun = T)
load_all()
getwd()
load_all()
detach("package::pengToolkit")
detach("package:pengToolkit")
update_myself <- function() {
message("upgrading this package from github mugpeng/pengToolkit")
if (grepl("pengToolkit", paste((.packages()), collapse = ", ")) == T) {
detach("package:pengToolkit")
}
devtools::install_github("mugpeng/pengToolkit")
library(pengToolkit)
}
update_myself()
make_r_template("good")
load_all()
roxygenize()
update_myself()
load_all()
